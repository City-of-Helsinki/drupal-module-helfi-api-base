<?php

/**
 * @file
 * Contains installation procedure for API base module.
 */

declare(strict_types=1);

use Drupal\Component\Utility\Html;
use Drupal\Core\Config\FileStorage;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\TranslatableInterface;
use Drupal\helfi_api_base\Features\FeatureManager;
use Drupal\rest\Entity\RestResourceConfig;
use Drupal\user\Entity\Role;

/**
 * Implements hook_install().
 */
function helfi_api_base_install(bool $is_syncing = FALSE) : void {
  if ($is_syncing) {
    return;
  }

  if (Drupal::moduleHandler()->moduleExists('filter')) {
    $formatters = Drupal::entityTypeManager()
      ->getStorage('filter_format')
      ->loadMultiple();

    /** @var \Drupal\filter\Entity\FilterFormat $format */
    foreach ($formatters as $format) {
      $format->setFilterConfig('helfi_link_converter', [
        'status' => 1,
      ])
        ->save();
    }
  }

  if (Drupal::moduleHandler()->moduleExists('raven')) {
    Drupal::configFactory()->getEditable('raven.settings')
      ->set('drush_error_handler', TRUE)
      ->set('request_tracing', TRUE)
      ->set('traces_sample_rate', 0.2)
      ->set('browser_traces_sample_rate', 0.2)
      ->set('database_tracing', TRUE)
      ->set('twig_tracing', TRUE)
      ->set('log_levels', [
        'emergency' => TRUE,
        'alert' => TRUE,
        'critical' => TRUE,
        'error' => TRUE,
        'warning' => FALSE,
        'notice' => FALSE,
        'info' => FALSE,
        'debug' => FALSE,
      ])
      ->set('fatal_error_handler', TRUE)
      ->save();
  }
}

/**
 * Enable 'helfi_link_converter' filter format.
 */
function helfi_api_base_update_9001() : void {
  helfi_api_base_install();
}

/**
 * Install the package version rest config.
 */
function helfi_api_base_update_9003() : void {
  if (!Drupal::moduleHandler()->moduleExists('rest')) {
    return;
  }
  $config_path = Drupal::service('extension.list.module')
    ->getPath('helfi_api_base') . '/config/optional';
  $source = new FileStorage($config_path);
  $config_storage = Drupal::service('config.storage');

  $configs = [
    'rest.resource.helfi_debug_package_version',
  ];

  foreach ($configs as $config) {
    $config_storage->write($config, $source->read($config));
  }
}

/**
 * Enable health check.
 */
function helfi_api_base_update_9007() : void {
  if (!Drupal::moduleHandler()->moduleExists('health_check')) {
    Drupal::service('module_installer')->install([
      'health_check',
    ]);
  }
}

/**
 * Enable basic_auth authentication method for debug endpoints.
 */
function helfi_api_base_update_9009() : void {
  if (Drupal::moduleHandler()->moduleExists('rest')) {
    Drupal::service('module_installer')->install([
      'basic_auth',
    ]);

    $endpoints = RestResourceConfig::loadMultiple([
      'helfi_debug_package_version',
    ]);
    foreach ($endpoints as $endpoint) {
      $config = $endpoint->get('configuration');

      if (!in_array('basic_auth', $config['authentication'])) {
        $config['authentication'][] = 'basic_auth';
        $endpoint->set('configuration', $config);
        $endpoint->save();
      }
    }
  }
}

/**
 * Create 'debug_api' role for hel.fi projects.
 */
function helfi_api_base_update_9013() : void {
  helfi_api_base_install();
}

/**
 * Enable 'delete old revisions' feature.
 */
function helfi_api_base_update_9014() : void {
  \Drupal::configFactory()->getEditable('helfi_api_base.delete_revisions')
    ->set('entity_types', [
      'node',
      'paragraph',
      'tpr_unit',
      'tpr_service',
      'tpr_errand_service',
    ])->save();
}

/**
 * Enable needed features.
 */
function helfi_api_base_update_9015() : void {
  /** @var \Drupal\helfi_api_base\Features\FeatureManager $service */
  $service = \Drupal::service(FeatureManager::class);
  $service->enableFeature(FeatureManager::DISABLE_USER_PASSWORD);
}

/**
 * Install raven module.
 */
function helfi_api_base_update_9016() : void {
  Drupal::service('module_installer')->install([
    'raven',
  ]);
  Drupal::configFactory()->getEditable('raven.settings')
    ->set('drush_error_handler', TRUE)
    ->set('request_tracing', TRUE)
    ->set('traces_sample_rate', 0.2)
    ->set('database_tracing', TRUE)
    ->set('twig_tracing', TRUE)
    ->save();
}

/**
 * Enable 'monolog' module.
 */
function helfi_api_base_update_9017(): void {
  Drupal::service('module_installer')->install([
    'monolog',
  ]);
}

/**
 * Enable new features.
 */
function helfi_api_base_update_9018(): void {
  /** @var \Drupal\helfi_api_base\Features\FeatureManager $service */
  $service = \Drupal::service(FeatureManager::class);
  $service->enableFeature(FeatureManager::USER_EXPIRE);
  $service->enableFeature(FeatureManager::DISABLE_EMAIL_SENDING);
}

/**
 * Remove debug_api role and debug api functionality.
 */
function helfi_api_base_update_9019(): void {
  if ($account = user_load_by_name('helfi-debug-data')) {
    $account->delete();
  }

  if ($role = Role::load('debug_api')) {
    $role->delete();
  }
  // Delete rest endpoint configuration.
  \Drupal::configFactory()->getEditable('rest.resource.helfi_debug_data')
    ->delete();
}

/**
 * UHF-9982: Configure sentry browser tracking.
 */
function helfi_api_base_update_9020(): void {
  if (Drupal::moduleHandler()->moduleExists('raven')) {
    Drupal::configFactory()->getEditable('raven.settings')
      ->set('browser_traces_sample_rate', 0.2)
      ->save();
  }
}

/**
 * UHF-10880: Update the Raven settings.
 */
function helfi_api_base_update_9021() : void {
  helfi_api_base_install();
}

/**
 * UHF-10969 Fix URLs with spaces.
 */
function helfi_api_base_update_9022(): void {
  helfi_api_base_sanitize_links();
}

/**
 * Sanitize links from text fields.
 */
function helfi_api_base_sanitize_links(): void {
  /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager */
  $entity_field_manager = Drupal::service('entity_field.manager');
  $entity_type_manager = \Drupal::entityTypeManager();

  $field_types = [
    'text_with_summary',
    'text',
    'text_long',
  ];

  $count = 0;

  foreach ($field_types as $field_type) {
    $field_map = $entity_field_manager->getFieldMapByFieldType($field_type);

    foreach ($field_map as $entity_type => $fields) {
      foreach ($fields as $name => $field) {
        $query = $entity_type_manager
          ->getStorage($entity_type)
          ->getQuery();

        $condition_group = $query->orConditionGroup();

        $conditions = [
          // Matches spaces immediately after href=".
          '<a href=" +[^"]+',
          // Matches URLs starting with %20.
          '<a href="%20[^"]+',
          // Matches URLs ending with %20.
          '<a href="[^"]*%20"',
          // Matches URLs ending with a literal or non-breaking space.
          '<a href="[^"]*[ \ ]"',
        ];

        foreach ($conditions as $condition) {
          $condition_group->condition($name, $condition, 'REGEXP');
        }

        $query->exists($name)->condition($condition_group);
        $query->accessCheck(FALSE);
        $ids = $query->execute();

        foreach ($ids as $id) {
          $entity = $entity_type_manager->getStorage($entity_type)->load($id);

          assert($entity instanceof TranslatableInterface);
          foreach ($entity->getTranslationLanguages() as $language) {
            _helfi_api_base_process_links(
              $entity->getTranslation($language->getId()),
              $name,
              $count
            );
          }
        }
      }
    }
  }
  \Drupal::logger('helfi_api_base')
    ->notice(sprintf('Fixed %s links with extra spaces.', $count));
}

/**
 * Sanitize filenames inside text fields.
 *
 * @param \Drupal\Core\Entity\ContentEntityInterface $entity
 *   The entity translation to process.
 * @param string $field_name
 *   The field name.
 * @param int $count
 *   The number of links fixed.
 */
function _helfi_api_base_process_links(ContentEntityInterface $entity, string $field_name, int &$count = 0) : void {
  if (!$value = $entity->get($field_name)->value) {
    return;
  }

  $hasChanges = FALSE;
  $dom = Html::load($value);
  /** @var \DOMElement $node */
  foreach ($dom->getElementsByTagName('a') as $node) {
    // Nothing to do if link has no href.
    if (!$href = $node->getAttribute('href')) {
      continue;
    }

    // Remove non-breaking spaces, any leading or trailing `%20`
    // and trim the href.
    $newHref = preg_replace('/^( )+|( )$/u', '', $href);
    $newHref = preg_replace('/^(%20)|(%20)$/u', '', $newHref);
    $newHref = trim($newHref);

    if ($newHref === $href) {
      continue;
    }

    $hasChanges = TRUE;
    $count++;
    $node->setAttribute('href', $newHref);
  }

  if ($hasChanges) {
    $entity->get($field_name)->value = Html::serialize($dom);
    $entity->save();
  }
}

/**
 * UHF-10713 Remove VersionChecker.
 */
function helfi_api_base_update_9023(): void {
  if (!\Drupal::moduleHandler()->moduleExists('rest')) {
    return;
  }

  \Drupal::entityTypeManager()
    ->getStorage('rest_resource_config')
    ->load('helfi_debug_package_version')
    ?->delete();
}


/**
 * UHF-11025: Enable big_pipe module, disable page_cache.
 */
function helfi_api_base_update_9024(): void {
  // Enable big_pipe module.
  if (!Drupal::moduleHandler()->moduleExists('big_pipe')) {
    Drupal::service('module_installer')->install([
      'big_pipe',
    ]);
  }
  // Disable page_cache module if Varnish is enabled.
  if (Drupal::moduleHandler()->moduleExists('varnish_purger')) {
    Drupal::service('module_installer')->uninstall([
      'page_cache',
    ]);
  }

}
