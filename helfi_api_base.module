<?php

/**
 * @file
 * Contains API base module.
 */

declare(strict_types=1);

use Drupal\Core\Asset\AttachedAssetsInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Language\LanguageInterface;
use Drupal\Core\Site\Settings;
use Drupal\helfi_api_base\ActionLog\ActionLogger;
use Drupal\helfi_api_base\Features\FeatureManager;
use Drupal\helfi_api_base\Link\LinkProcessor;
use Drupal\helfi_api_base\UserExpire\UserExpireManager;

/**
 * Implements hook_element_info_alter().
 */
function helfi_api_base_element_info_alter(array &$info) : void {
  $info['link']['#pre_render'] = [
    [LinkProcessor::class, 'preRenderLink'],
  ];
}

/**
 * Implements hook_theme().
 */
function helfi_api_base_theme() : array {
  return [
    'helfi_link' => [
      'variables' => [
        'url' => NULL,
        'title' => NULL,
        'attributes' => [],
      ],
      'template' => 'helfi-link',
    ],
    'debug_item' => [
      'variables' => [
        'id' => NULL,
        'label' => NULL,
        'data' => [],
      ],
      'template' => 'debug-item',
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function helfi_api_base_theme_suggestions_debug_item(array $variables) : array {
  $suggestions = [];
  $suggestions[] = 'debug_item__' . strtr($variables['id'], '.', '_');
  return $suggestions;
}

/**
 * Implements hook_mail_alter().
 */
function helfi_api_base_mail_alter(&$message) : void {
  // Prevent sending email if current site/environment is known to the resolver.
  // Only helfi-drupal sites are affected by this change.
  /** @var \Drupal\helfi_api_base\Features\FeatureManager $featureManager */
  $featureManager = \Drupal::service(FeatureManager::class);

  if ($featureManager->isEnabled(FeatureManager::DISABLE_EMAIL_SENDING)) {
    $message['send'] = FALSE;
  }
}

/**
 * Implements hook_entity_update().
 */
function helfi_api_base_entity_update(EntityInterface $entity) : void {
  /** @var \Drupal\helfi_api_base\Entity\Revision\RevisionManager $revisionManager */
  $revisionManager = \Drupal::service('helfi_api_base.revision_manager');

  if (!$revisionManager->entityTypeIsSupported($entity->getEntityTypeId())) {
    return;
  }
  static $cache = [];

  $key = sprintf('%s-%s', $entity->getEntityTypeId(), $entity->id());

  // Only queue entity once per request.
  if (!isset($cache[$key])) {
    $queue = \Drupal::queue('helfi_api_base_revision');
    $queue->createItem([
      'entity_id' => $entity->id(),
      'entity_type' => $entity->getEntityTypeId(),
    ]);
    $cache[$key] = TRUE;
  }
}

/**
 * Implements hook_cron().
 */
function helfi_api_base_cron() : void {
  /** @var \Drupal\helfi_api_base\Features\FeatureManager $featureManager */
  $featureManager = \Drupal::service(FeatureManager::class);

  if ($featureManager->isEnabled(FeatureManager::USER_EXPIRE)) {
    /** @var \Drupal\helfi_api_base\UserExpire\UserExpireManager $userExpireManager */
    $userExpireManager = \Drupal::service(UserExpireManager::class);
    $userExpireManager->cancelExpiredUsers();
    $userExpireManager->deleteExpiredUsers();
  }
}

/**
 * Implements hook_template_preprocess_default_variables_alter().
 */
function helfi_api_base_template_preprocess_default_variables_alter(array &$variables): void {
  // Set the language object and alternative language attributes.
  $variables['language'] = $language = Drupal::languageManager()
    ->getCurrentLanguage(LanguageInterface::TYPE_CONTENT);

  // Set alternative language fallback attributes.
  $defaultLanguageResolver = Drupal::service('helfi_api_base.default_language_resolver');
  $variables['alternative_language'] = $defaultLanguageResolver->isAltLanguage($language->getId());

  if ($variables['alternative_language']) {
    $attributes = $defaultLanguageResolver->getFallbackLangAttributes();
    $variables['lang_attributes']['fallback_lang'] = $attributes['lang'];
    $variables['lang_attributes']['fallback_dir'] = $attributes['dir'];
  }
}

/**
 * Implements hook_js_settings_alter().
 */
function helfi_api_base_js_settings_alter(array &$settings, AttachedAssetsInterface $assets): void {
  // Raven sets DSN from SENTRY_DSN environment variable, which we use for
  // PHP tracking.
  if (isset($settings['raven']['options']['dsn'])) {
    $settings['raven']['options']['dsn'] = getenv('SENTRY_DSN_PUBLIC');
  }
}

/**
 * Implements hook_library_info_alter().
 */
function helfi_api_base_library_info_alter(array &$libraries, string $extension): void {
  foreach ($libraries as &$library) {
    if (isset($library['version']) && $library['version'] === 'HELFI_DEPLOYMENT_IDENTIFIER') {
      $library['version'] = Settings::get('deployment_identifier', '0.0.0');
    }
  }
}

/**
 * Implements hook_entity_presave().
 */
function helfi_api_base_entity_presave(EntityInterface $entity): void {
  \Drupal::service(ActionLogger::class)->log('Save', $entity);
}

/**
 * Implements hook_entity_predelete().
 */
function helfi_api_base_entity_predelete(EntityInterface $entity): void {
  \Drupal::service(ActionLogger::class)->log('Delete', $entity);
}
